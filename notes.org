* COMMENT File-local variables
# -*- coding:utf-8 -*-
#+TITLE: Settings for Maximizing Org-mode Note taking and publishing experience.
#+AUTHOR: Haran Mia
#+EMAIL: 37643674+haranmia@users.noreply.github.com
#+DATE: %T
#+STARTUP:indent
#+STARTUP: inlineimages


* LICENSE
MIT License

Copyright (c) 2018 Haran Mia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

* README
  The idea is to keep everything in a single .org file,
  including both configurations and contents.
  This .org file can also be used for publishing pdf articles,
  web pages, etc. using org-modes export functionalities.

  For availabe features, please refer to the function source-code.


* SRC
** ISSUES
** WISH-lIST
   - [ ] CAPTURE and refile as a subtree in this note
     - [ ] Deal with duplicate outline-headline in different captures.
     - [ ] Sanitizers for title and export-file-name.
     - [ ] Consider a more generic syntax for function-finding-location.

  - [ ] Define preamble/postamble/header etc. for better look & feel (SOON)

  - [ ] Define public set interfaces

  - [ ] More generic syntax for function-finding-location in CAPTURE & Refile (SOMEDAY)

** Generic elisp utilities
*** Genpath
#+BEGIN_SRC emacs-lisp
  (defun mon-genpath (path-elem &optional absolute)
    (let ((relative-path (mapconcat 'directory-file-name path-elem "/")))
      (if absolute
          (expand-file-name relative-path)
        relative-path)))
  ;; Example:
  ;; (message (mon-genpath (list "a" "b" "c.txt")))
#+END_SRC

** Generic org-mode utilities
*** Org-outline to filename
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-to-org-filename (&optional base-directory)
    (mon-org-outline-to-filename ".org" base-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-to-filename (&optional extension base-directory)
    "Note: non-nil (file) extension contains the leading dot.
  "
    (let ((filename
           (concat (org-display-outline-path nil t "/" t) extension)))

      (if base-directory
          (expand-file-name
           filename (file-name-as-directory base-directory))
        filename)))
#+END_SRC
*** Org-outline heading (get-function)
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-get-heading ()
    (nth 4 (org-heading-components)))
#+END_SRC
** CAPTURE and refile as a subtree in this note
*** Capture Templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
          ("a" "Articles" entry
           (file+olp buffer-file-name
                     "STOCK" "GRAINS" "ARTICLES") ;; Outline "STOCK/GRAINS/ARTICLES" must exist
           "* TODO %^{Title}
  ,#+OPTIONS: toc:nil
  ,#+begin_abstract
  %^{Abstract}
  Keywords: %^{Tags (comma separated)}
  ,#+end_abstract
  %\\2\n%?\n"
           :prepend t :kill-buffer t)
          ))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-capture-after-finalize-hook ()
    (org-capture-goto-last-stored))

  (add-hook 'org-capture-after-finalize-hook
            'mon-org-capture-after-finalize-hook)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-capture-prepare-finalize-hook ()
      (progn
        (mon-org-custom-title-create)
        (mon-org-custom-export-file-name-create)))

  (add-hook 'org-capture-prepare-finalize-hook
            'mon-org-capture-prepare-finalize-hook)

#+END_SRC
*** Custom properties (export-file-name, titles, etc.)
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-property-get (&optional property-str)
    "Properties such as EXPORT_FILE_NAME etc. to be passed
  enclosed within double quotation."

    (org-entry-get (point) property-str))
#+END_SRC
**** EXPORT_FILE_NAME
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-export-file-name-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((export-file (mon-org-custom-property-get "EXPORT_FILE_NAME")))
        (unless export-file
          (org-set-property "EXPORT_FILE_NAME"
                            (mon-org-outline-to-org-filename))))
      (widen)))
#+END_SRC

**** TTILE
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-title-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "TITLE")))
        (unless title
          (org-set-property "TITLE"
                            (mon-org-outline-get-heading))))
      (widen)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
#+END_SRC
#+BEGIN_SRC emacs-lisp
#+END_SRC
**** TANGLE HEADER-ARGS (Cf. EXPORT_FILE_NAME)
#+BEGIN_SRC emacs-lisp
  (defun mon-org-bable-tangle-header-args-create (&optional extension)
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((export-file (mon-org-custom-property-get "header-args")))
        (unless export-file
          (org-set-property "header-args"
                            (concat ":tangle "
                                    (mon-org-outline-to-filename)
                                    (or extension "")))))
      (widen)))
#+END_SRC
** Refile a subtree from this note
*** Subtree contents for org-export
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile-to-org (&optional base-directory)
    (interactive)
    (mon-org-subtree-contents-refile ".org" base-directory))

  (defun mon-org-subtree-contents-refile-bare (&optional base-directory)
    (interactive)
    (mon-org-subtree-contents-refile nil base-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile (&optional extension base-directory)

    (save-excursion
      (org-narrow-to-subtree)
      (org-back-to-heading)
      (let ((target-filename
             (or (mon-org-custom-property-get "EXPORT_FILE_NAME")
                 (mon-org-outline-to-filename extension base-directory))))

        (write-region (org-get-entry) nil target-filename))
      (widen)))
#+END_SRC
*** Tangle babel source blocks
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-tangle-all-babel-blocks ()
    "ASSERT `header-args :tangle <filename.extension>` given in subtree properties."
    (interactive)

    (save-excursion
    (org-back-to-heading)
    (org-narrow-to-subtree)
    (org-babel-tangle)
    (widen)))
#+END_SRC
** HTML Publishing
*** Congfiguration database
Put all configurations in the hash-table 'mon-configdb'
#+BEGIN_SRC emacs-lisp
  (setq mon-configdb (make-hash-table))
#+END_SRC

*** Core directory and path utilities
**** File-dir and root-dir
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-file-dir mon-configdb)
        (file-name-directory (or load-file-name buffer-file-name)))

  (defun mon-file-dir ()
    (gethash 'mon-file-dir mon-configdb))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-root-dir mon-configdb) "stock")

  (defun mon-root-dir (&optional init-root-dir)
    (or init-root-dir
        (gethash 'mon-root-dir mon-configdb)))
#+END_SRC
**** Base directory
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-contents-dir mon-configdb)
        (concat (file-name-as-directory (mon-root-dir))
                (file-name-as-directory "grains"))) ;; default

  (defun mon-contents-dir (&optional init-contents-dir use-as-origin)
    ;; set
    (and init-contents-dir
         (if use-as-origin
             ;; if
             (setf (gethash 'mon-contents-dir mon-configdb)
                   (file-name-as-directory init-contents-dir))
           ;; else
           (setf (gethash 'mon-contents-dir mon-configdb)
                 (concat (file-name-as-directory (mon-root-dir))
                         (file-name-as-directory init-contents-dir)))))
    ;; get
    (gethash 'mon-contents-dir mon-configdb))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-www-contents-directory (&optional dir prefix-path suffix-path absolute)
    (let* ((this-dir
            (file-name-as-directory
             (concat (or (and prefix-path (file-name-as-directory prefix-path))
                         (mon-contents-dir))
                     dir)))

           (suffix-to-this
            (and suffix-path
                 (if (file-name-extension suffix-path) suffix-path
                   (file-name-as-directory suffix-path))))
           ;;
           (contents-relative-path (concat this-dir suffix-to-this)))


        ;; Use concat to force relative path by default.
        ;; For absolute==NON-NIL, use absolute path.
        (if absolute
            (expand-file-name contents-relative-path)
          contents-relative-path)))
#+END_SRC
**** Publishing-dir
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-www-dir mon-configdb)
        (file-name-as-directory "w3")) ;; default
  (defun mon-www-dir (&optional init-www-dir use-as-origin)
      ;; set
      (and init-www-dir
           (if use-as-origin
               (setf (gethash 'mon-www-dir mon-configdb)
                     (file-name-as-directory init-www-dir))))

      ;; get
      (gethash 'mon-www-dir mon-configdb))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-www-publish-directory (&optional dir prefix-path suffix-path absolute)
    (let* ((this-dir
            (file-name-as-directory
             (concat (or (and prefix-path (file-name-as-directory prefix-path))
                         (mon-www-dir))
                     dir)))

           (suffix-to-this
            (and suffix-path
                 (if (file-name-extension suffix-path) suffix-path
                   (file-name-as-directory suffix-path))))
           ;;
           (contents-relative-path (concat this-dir suffix-to-this)))

      ;; Use concat to force relative path by default.
      ;; For absolute==NON-NIL, use absolute path.
      (if absolute
          (expand-file-name contents-relative-path)
        contents-relative-path)))

#+END_SRC

*** Theme
**** Name and deploy directory
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'theme-name mon-configdb) '"proxy")

  (defun mon-theme-name (&optional init-theme-name)
    (or init-theme-name
        (gethash 'theme-name mon-configdb)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-theme-deploy-dir (&optional init-theme-name)
    (format "chunk/themes/%s" (mon-theme-name init-theme-name)))
#+END_SRC
**** Base extension
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-attachments mon-configdb)
        (regexp-opt '("css" "woff" "js" "html" "pdf"
                      "gif" "ico" "jpg" "jpeg" "png" "svg")))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-base-extension (&optional init-theme)
    (gethash 'mon-attachments mon-configdb))
#+END_SRC
**** Base directory
#+BEGIN_SRC emacs-lisp
  (defun mon-base-directory (&optional theme page prefix-dir suffix-dir absolute)
    (let ((dir
           (if theme
               (mon-www-contents-directory (mon-theme-deploy-dir theme) (mon-root-dir)) ;; if
             ;; else == mon-base-direcotry-no-theme
             (mon-www-contents-directory page prefix-dir suffix-dir absolute))))

    (downcase dir)))
#+END_SRC
**** Publishing directory
#+BEGIN_SRC emacs-lisp
  (defun mon-publishing-directory (&optional theme page prefix-dir suffix-dir absolute)
    (let ((dir
           (if theme
               (mon-www-publish-directory (mon-theme-deploy-dir theme)) ;; if
             ;; else == mon-www-publish-dir-no-theme
             (mon-www-publish-directory page prefix-dir suffix-dir absolute))))

    (downcase dir)))
#+END_SRC

**** Postamble
#+BEGIN_SRC emacs-lisp
  (defun mon-html-postamble (&optional init-theme)
    "<p>Last update: <span class=\"date\">%C</span></p>")
#+END_SRC

**** Preamble
#+BEGIN_SRC emacs-lisp
  (defun mon-html-preamble (&optional init-page init-theme page-title page-subtitle)
    "TBD: Constructor for pagestruct /w theme-inheritance someday."
    (mon-html-preamble-impl-proxy '((:pagestruct . (((:name . "About")
                                                     (:link . "/"))
                                                    ((:name . "Articles")
                                                     (:link . "articles")))))
                                  page-title
                                  page-subtitle)
    )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-html-preamble-impl-proxy (&optional pagestruct-alist page-title page-subtitle)

      (let* ((f-name (lambda (x) (alist-get ':name  x)))
             (f-link (lambda (x) (alist-get ':link  x)))
             (f-insert
              (lambda (x)
                (progn
                  (insert (format "  <a href=\"%s\">%s</a>\n"
                                  (expand-file-name (file-name-as-directory
                                                     (funcall f-link x))
                                                    "/")
                                  (funcall f-name x)
                                  ))))))


        (with-temp-buffer
          (insert (format "<h1 class=\"title\">%s\n" (or page-title "%%PAGE::TITLE")))
          (insert (format "  <p class=\"subtitle\"> %s </p>\n" (or page-subtitle "%%PAGE::SUBTITLE")))

          (insert (format "</h1>\n"))
          (insert (format "<nav>\n"))

          (funcall f-insert (car (alist-get ':pagestruct pagestruct-alist)))
           (mapc '(lambda (y)
                    (funcall f-insert y))
                 (cdr (alist-get ':pagestruct pagestruct-alist)))

           (insert (format "</nav>\n"))
           (buffer-string))))

#+END_SRC

*** Project-alist
**** Utilities
#+BEGIN_SRC emacs-lisp
  (defun mon-publish-alist-name (&optional theme suffix delimiter)
    (let ((sentinel
           (if suffix (concat (or delimiter "-") suffix))))

      (concat "mon" (or delimiter "-") (mon-theme-name theme)
              sentinel)))
#+END_SRC
**** Project alist and components (declarations only)
#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist ; (org-publish-project-alist)
        (list))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               (list (mon-publish-alist-name) ;; project name generated as mon-<theme>
                     :components (list
                                  (mon-publish-alist-name nil "chunk") ;; default
                                  (mon-publish-alist-name nil "-top") ;; default
                                  ;;-----
                                  (mon-publish-alist-name nil "articles")
                                  )))
#+END_SRC

**** CHUNK
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               ;; Move chunk files, maybe move into
               (list (mon-publish-alist-name nil "chunk") ;; default
                     :base-directory (mon-base-directory (mon-theme-name))
                     :exclued (regexp-opt (list (file-name-nondirectory (directory-file-name (mon-www-publish-directory)))))
                     :base-extension (mon-base-extension)

                     :publishing-directory (mon-publishing-directory (mon-theme-name))
                     :publishing-function 'org-publish-attachment
                     :recursive t
                     ))
#+END_SRC

**** TOP
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               ;; Various misc files in the root
               (list (mon-publish-alist-name nil "-top") ;; default
                     :base-directory (mon-base-directory nil "about")
                     :base-extension "org"

                     :publishing-directory (mon-publishing-directory)
                     :publishing-function '(org-html-publish-to-html)
                     :recursive t

                     :auto-sitemap nil

                     :html-postamble (mon-html-postamble)
                     :html-preamble (mon-html-preamble
                                     "about"
                                     "proxy"
                                     "LowLand *Travellers*"
                                     "Never stop exploring!") ;; args: page-structure
                     ))
#+END_SRC

**** ARTICLES
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               (list (mon-publish-alist-name nil "articles")
                     :base-directory (mon-base-directory nil "articles")

                     :publishing-directory (mon-publishing-directory nil "articles")
                     :publishing-function 'org-html-publish-to-html
                     :recursive t

                     :auto-sitemap nil

                     :html-postamble (mon-html-postamble)
                     :html-preamble (mon-html-preamble
                                     "articles"
                                     "proxy"
                                     "LowLand *Travellers*"
                                     "Never stop exploring!") ;; args: page-structure
                     ))

#+END_SRC

* STOCK
** GRAINS
*** ARTICLES
** CHUNK
*** THEMES
**** PROXY
***** ASSETS
****** CSS
******* test1.css
/* an example for (org-refile) testing... */
h1 {
    color: red;
    font-size: 25px;
}
******* test2.css
:PROPERTIES:
:header-args: :tangle STOCK/CHUNK/THEMES/PROXY/ASSETS/CSS/test2.css
:END:
#+BEGIN_SRC css
  /* an example for (org-refile) testing... */
  h1 {
      color: red;
      font-size: 25px;
  }
#+END_SRC

#+BEGIN_SRC css
  /* an example for (org-refile) testing... */
  h2 {
      color: yellow;
      font-size: 15px;
  }
#+END_SRC
******* test3
:PROPERTIES:
:header-args: :tangle STOCK/CHUNK/THEMES/PROXY/ASSETS/CSS/test3
:END:
#+BEGIN_SRC css
  /* an example for (org-refile) testing... */
  h1 {
      color: red;
      font-size: 25px;
  }
#+END_SRC

#+BEGIN_SRC css
  /* an example for (org-refile) testing... */
  h2 {
      color: yellow;
      font-size: 15px;
  }
#+END_SRC
