* COMMENT File-local variables
# -*- coding:utf-8 -*-
#+TITLE: Maximize Note taking/publishing experience with Org-Mode.
#+AUTHOR: Haran Mia
#+EMAIL: 37643674+haranmia@users.noreply.github.com
#+DATE: %T
#+STARTUP:indent
#+STARTUP: inlineimages


* LICENSE
MIT License

Copyright (c) 2018 Haran Mia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

* README
  The idea is to keep everything in a single .org file,
  including both configurations and contents.
  This .org file can also be used for publishing pdf articles,
  web pages, etc. using org-modes export functionalities.

  For availabe features, please refer to the function source-code.

* Wish-list (or, Issues)
:PROPERTIES:
:VISIBILITY: all
:END:
** ISSUES
- [ ] Write a sample article including figures, equations and codes
- [ ] Save figures in a folder, consider file-name rules
- [ ] Start a real experimental Github-pages site

** WISH-lIST
   - [ ] CAPTURE and refile as a subtree in this note
     - [ ] Deal with duplicate outline-headline in different captures.
     - [ ] Sanitizers for title and export-file-name.
     - [ ] Consider a more generic syntax for function-finding-location.

  - [ ] Define preamble/postamble/header etc. for better look & feel (SOON)
  - [ ] Define public set interfaces
  - [ ] More generic syntax for function-finding-location in CAPTURE & Refile (SOMEDAY)

** Resolutions and Design considerations
:PROPERTIES:
:VISIBILITY: folded
:END:
- [X] Resolve conflicts with terminologies used for structuring/styles
      such as title, subtite, or page etc.

  Considerations: Using title/subtitle to refer to headings in a single article is rather trivial.
  Therefore group-wise/site-wise title/subtitle should be modified.
  For now using a simple analogy from sailboat racing:

  + a-ship (previously, pagestruct)
    + name
    + anchor (previously, link)
    + mainsail (previously, title)
    + headsail (previously, subtitle)
    + pages/articles x N ( eath page will have their individual title/subtitle)
* SRC
** Generic elisp utilities
*** Genpath
#+BEGIN_SRC emacs-lisp
  (defun mon-genpath (path-elem &optional absolute)
    (let ((relative-path (mapconcat 'directory-file-name path-elem "/")))
      (if absolute
          (expand-file-name relative-path)
        relative-path)))
  ;; Example:
  ;; (message (mon-genpath (list "a" "b" "c.txt")))
#+END_SRC

** Generic org-mode utilities
*** Org-outline to filename
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-to-org-filename (&optional base-directory)
    (mon-org-outline-to-filename ".org" base-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-to-filename (&optional extension base-directory)
    "Note: non-nil (file) extension contains the leading dot.
  "
    (let ((filename
           (concat (org-display-outline-path nil t "/" t) extension)))

      (if base-directory
          (expand-file-name
           filename (file-name-as-directory base-directory))
        filename)))
#+END_SRC
*** Org-outline heading (get-function)
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-get-heading ()
    (nth 4 (org-heading-components)))
#+END_SRC
** CAPTURE and refile as a subtree in this note
*** Capture Templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
          ("a" "Articles" entry
           (file+olp buffer-file-name
                     "STOCK" "GRAINS" "ARTICLES") ;; Outline "STOCK/GRAINS/ARTICLES" must exist
           "* TODO %^{Title}
  ,#+OPTIONS: toc:nil
  ,#+begin_abstract
  %^{Abstract}
  Keywords: %^{Tags (comma separated)}
  ,#+end_abstract
  %\\2\n%?\n"
           :prepend t :kill-buffer t)
          ))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-capture-after-finalize-hook ()
    (org-capture-goto-last-stored))

  (add-hook 'org-capture-after-finalize-hook
            'mon-org-capture-after-finalize-hook)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-capture-prepare-finalize-hook ()
      (progn
        (mon-org-custom-export-file-name-create)
        (mon-org-custom-title-create)
        (mon-org-custom-subtitle-create)
        (mon-org-custom-author-create)
        (mon-org-custom-email-create)
        (mon-org-custom-create-timestamp-create)
        (mon-org-custom-startup-options-create)
        ))

  (add-hook 'org-capture-prepare-finalize-hook
            'mon-org-capture-prepare-finalize-hook)

#+END_SRC
*** Custom properties (export-file-name, titles, etc.)
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-property-get (&optional property-str)
    "Properties such as EXPORT_FILE_NAME etc. to be passed
  enclosed within double quotation."

    (org-entry-get (point) property-str))
#+END_SRC
**** EXPORT_FILE_NAME
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-export-file-name-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((export-file (mon-org-custom-property-get "EXPORT_FILE_NAME")))
        (unless export-file
          (org-set-property "EXPORT_FILE_NAME"
                            (mon-org-outline-to-org-filename))))
      (widen)))
#+END_SRC

**** TTILE
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-title-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "TITLE")))
        (unless title
          (org-set-property "TITLE"
                            (mon-org-outline-get-heading))))
      (widen)))
#+END_SRC
**** SUBTITLE
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-subtitle-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "SUBTITLE")))
        (unless title
          (org-set-property "SUBTITLE" ""))) ;; now, just a placeholder
      (widen)))
#+END_SRC
**** AUTHOR
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-author-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "AUTHOR")))
        (unless title
          (org-set-property "AUTHOR" ""))) ;; now, just a placeholder
      (widen)))
#+END_SRC
**** EMAIL
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-email-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "EMAIL")))
        (unless title
          (org-set-property "EMAIL" ""))) ;; now, just a placeholder
      (widen)))
#+END_SRC
**** Created date and time a.k.a. CREATE_TIMESTAMP
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-create-timestamp-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "CREATE_TIMESTAMP")))
        (unless title
          (org-set-property "CREATE_TIMESTAMP" (format-time-string "%c" (current-time)))))
      (widen)))
#+END_SRC
**** EMAIL
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-startup-options-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "STARTUP")))
        (unless title
          (org-set-property "STARTUP" ""))) ;; now, just a placeholder
      (widen)))
#+END_SRC
**** TANGLE HEADER-ARGS (Cf. EXPORT_FILE_NAME)
#+BEGIN_SRC emacs-lisp
  (defun mon-org-bable-tangle-header-args-create (&optional extension)
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((export-file (mon-org-custom-property-get "header-args")))
        (unless export-file
          (org-set-property "header-args"
                            (concat ":tangle "
                                    (mon-org-outline-to-filename)
                                    (or extension "")))))
      (widen)))
#+END_SRC
** Refile a subtree from this note
*** File-local variables
#+BEGIN_SRC emacs-lisp
  (defun mon-org-insert-file-headers
      (&optional
       title
       subtitle
       author
       email
       fixed-date-time
       keyword-tags
       startup-option)

    (interactive)

    (format "* COMMENT File-local variables
  # -*- coding:utf-8 -*-
  ,#+TITLE: %s
  ,#+SUBTITLE: %s
  ,#+AUTHOR: %s
  ,#+EMAIL: %s
  ,#+DATE: %s
  ,#+KEYWORDS: %s
  ,#+STARTUP: %s\n\n\n"
            (or title "Untitled")
            (or subtitle "")
            (or author "Anonymous")
            email
            (or fixed-date-time (format-time-string "%c" (current-time))) ;; if not previously created, current-time should be good
            keyword-tags
            (or startup-option "indent")))
#+END_SRC
*** Subtree contents for org-export
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile-to-org (&optional base-directory)
    (interactive)
    (mon-org-subtree-contents-refile ".org" base-directory))

  (defun mon-org-subtree-contents-refile-bare (&optional base-directory)
    (interactive)
    (mon-org-subtree-contents-refile nil base-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile (&optional extension base-directory)

    (save-excursion
      (org-narrow-to-subtree)
      (org-back-to-heading)
      (let ((target-filename
             (or (mon-org-custom-property-get "EXPORT_FILE_NAME")
                 (mon-org-outline-to-filename extension base-directory))))

        (write-region (org-get-entry) nil target-filename))
      (widen)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile-to-org-no-props (&optional base-directory)
    (interactive)
    (mon-org-subtree-contents-refile-no-props ".org" base-directory))

  (defun mon-org-subtree-contents-refile-bare-no-props (&optional base-directory)
    (interactive)
    (mon-org-subtree-contents-refile-no-props nil base-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile-no-props (&optional extension base-directory)

    (save-excursion
      (org-narrow-to-subtree)
      (org-back-to-heading)

      (let ((org-yank-adjusted-subtrees t)
            (target-filename
             (or (mon-org-custom-property-get "EXPORT_FILE_NAME")
                 (mon-org-outline-to-filename extension base-directory)))
            (this-title (mon-org-custom-property-get "TITLE"))
            (this-subtitle (mon-org-custom-property-get "SUBTITLE"))
            (this-author (mon-org-custom-property-get "AUTHOR"))
            (this-email (mon-org-custom-property-get "EMAIL"))
            (this-create-timestamp (mon-org-custom-property-get "CREATE_TIMESTAMP"))
            (this-update-timestamp (mon-org-custom-property-get "UPDATE_TIMESTAMP")) ;; (last update provided via postamble) ponder if keeping that information in property drawer will be of use
            (this-startup (mon-org-custom-property-get "STARTUP"))
            (this-keywords (mon-org-custom-property-get "KEYWORDS")) ;; need to take-out from buffer
            )

        ;;(write-region (org-get-entry) nil target-filename)
        (org-copy-subtree)
        (with-current-buffer (get-buffer-create (concat "*-temp-buffer-SOME-RANDOM-ID-HERE-*"))
          (org-mode)


          (insert (mon-org-insert-file-headers
                   this-title ;; title
                   this-subtitle ;; subtitle
                   this-author ;; author
                   this-email ;; email
                   this-create-timestamp ;; fixed-date-time
                   this-keywords ;; keyword-tags
                   this-startup ;;startup-option
                   ))
          (save-excursion
            (goto-char (point-min))
            (write-region (point-at-bol 2) (point-max) target-filename)) ;; removes the "* COMMENT File-local variables" outline


          (org-yank)
          (org-back-to-heading)

          (if (re-search-forward ":PROPERTIES:" (point-max) t)
              (let ((beg (match-beginning 0))
                    (end (re-search-forward ":END:")))
                (write-region (+ end 1) (point-max) target-filename t)) ;; write-region with append=t

            (write-region (point-at-bol 2) (point-max) target-filename t))


          (kill-buffer)))
      (widen)))
#+END_SRC

*** Tangle babel source blocks
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-tangle-all-babel-blocks ()
    "ASSERT `header-args :tangle <filename.extension>` given in subtree properties."
    (interactive)

    (save-excursion
    (org-back-to-heading)
    (org-narrow-to-subtree)
    (org-babel-tangle)
    (widen)))
#+END_SRC
** HTML Publishing
*** Congfiguration database
Put all configurations in the hash-table 'mon-configdb'
#+BEGIN_SRC emacs-lisp
  (setq mon-configdb (make-hash-table))
#+END_SRC

*** Core directory and path utilities
**** File-dir and root-dir
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-file-dir mon-configdb)
        (file-name-directory (or load-file-name buffer-file-name)))

  (defun mon-file-dir ()
    (gethash 'mon-file-dir mon-configdb))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-root-dir mon-configdb) "stock")

  (defun mon-root-dir (&optional init-root-dir)
    (or init-root-dir
        (gethash 'mon-root-dir mon-configdb)))
#+END_SRC
**** Base directory
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-contents-dir mon-configdb)
        (concat (file-name-as-directory (mon-root-dir))
                (file-name-as-directory "grains"))) ;; default

  (defun mon-contents-dir (&optional init-contents-dir use-as-origin)
    ;; set
    (and init-contents-dir
         (if use-as-origin
             ;; if
             (setf (gethash 'mon-contents-dir mon-configdb)
                   (file-name-as-directory init-contents-dir))
           ;; else
           (setf (gethash 'mon-contents-dir mon-configdb)
                 (concat (file-name-as-directory (mon-root-dir))
                         (file-name-as-directory init-contents-dir)))))
    ;; get
    (gethash 'mon-contents-dir mon-configdb))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-www-contents-directory (&optional dir prefix-path suffix-path absolute)
    (let* ((this-dir
            (file-name-as-directory
             (concat (or (and prefix-path (file-name-as-directory prefix-path))
                         (mon-contents-dir))
                     dir)))

           (suffix-to-this
            (and suffix-path
                 (if (file-name-extension suffix-path) suffix-path
                   (file-name-as-directory suffix-path))))
           ;;
           (contents-relative-path (concat this-dir suffix-to-this)))


        ;; Use concat to force relative path by default.
        ;; For absolute==NON-NIL, use absolute path.
        (if absolute
            (expand-file-name contents-relative-path)
          contents-relative-path)))
#+END_SRC
**** Publishing-dir
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-www-dir mon-configdb)
        (file-name-as-directory "w3")) ;; default
  (defun mon-www-dir (&optional init-www-dir use-as-origin)
      ;; set
      (and init-www-dir
           (if use-as-origin
               (setf (gethash 'mon-www-dir mon-configdb)
                     (file-name-as-directory init-www-dir))))

      ;; get
      (gethash 'mon-www-dir mon-configdb))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-www-publish-directory (&optional dir prefix-path suffix-path absolute)
    (let* ((this-dir
            (file-name-as-directory
             (concat (or (and prefix-path (file-name-as-directory prefix-path))
                         (mon-www-dir))
                     dir)))

           (suffix-to-this
            (and suffix-path
                 (if (file-name-extension suffix-path) suffix-path
                   (file-name-as-directory suffix-path))))
           ;;
           (contents-relative-path (concat this-dir suffix-to-this)))

      ;; Use concat to force relative path by default.
      ;; For absolute==NON-NIL, use absolute path.
      (if absolute
          (expand-file-name contents-relative-path)
        contents-relative-path)))

#+END_SRC

*** Theme
**** Name and deploy directory
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'theme-name mon-configdb) '"proxy")

  (defun mon-theme-name (&optional init-theme-name)
    (or init-theme-name
        (gethash 'theme-name mon-configdb)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-theme-deploy-dir (&optional init-theme-name)
    (format "chunk/themes/%s" (mon-theme-name init-theme-name)))
#+END_SRC
**** Base extension
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-attachments mon-configdb)
        (regexp-opt '("css" "woff" "js" "html" "pdf"
                      "gif" "ico" "jpg" "jpeg" "png" "svg")))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-base-extension (&optional init-theme)
    (gethash 'mon-attachments mon-configdb))
#+END_SRC
**** Base directory
#+BEGIN_SRC emacs-lisp
  (defun mon-base-directory (&optional theme page prefix-dir suffix-dir absolute)
    (let ((dir
           (if theme
               (mon-www-contents-directory (mon-theme-deploy-dir theme) (mon-root-dir)) ;; if
             ;; else == mon-base-direcotry-no-theme
             (mon-www-contents-directory page prefix-dir suffix-dir absolute))))

    (downcase dir)))
#+END_SRC
**** Publishing directory
#+BEGIN_SRC emacs-lisp
  (defun mon-publishing-directory (&optional theme page prefix-dir suffix-dir absolute)
    (let ((dir
           (if theme
               (mon-www-publish-directory (mon-theme-deploy-dir theme)) ;; if
             ;; else == mon-www-publish-dir-no-theme
             (mon-www-publish-directory page prefix-dir suffix-dir absolute))))

    (downcase dir)))
#+END_SRC

**** Postamble
#+BEGIN_SRC emacs-lisp
  (defun mon-html-postamble (&optional init-theme)
    "<p>Last update: <span class=\"date\">%C</span></p>")
#+END_SRC

**** Preamble
#+BEGIN_SRC emacs-lisp
  (defun mon-html-preamble (&optional init-page init-theme mainsail headsail)
    "TBD: Constructor for ships /w theme-inheritance someday."
    (mon-html-preamble-impl-proxy '((:ships . (((:name . "About")
                                                (:anchor . "/"))
                                               ((:name . "Articles")
                                                (:anchor . "articles")))))
                                  mainsail ;; main-headline
                                  headsail) ;; sub-headline
    )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-html-preamble-impl-proxy (&optional ships-alist mainsail headsail)
    "Note: mainsail/headsail are placeholders for main/sub-headline."

      (let* ((f-name (lambda (x) (alist-get ':name  x)))
             (f-link (lambda (x) (alist-get ':anchor  x)))
             (f-insert
              (lambda (x)
                (progn
                  (insert (format "  <a href=\"%s\">%s</a>\n"
                                  (expand-file-name (file-name-as-directory
                                                     (funcall f-link x))
                                                    "/")
                                  (funcall f-name x)
                                  ))))))


        (with-temp-buffer
          (insert (format "<h1 class=\"mainsail\">%s\n" (or mainsail "%%MAIN-HEADLINE")))
          (insert (format "  <p class=\"headsail\"> %s </p>\n" (or headsail "%%SUB-HEADLINE")))

          (insert (format "</h1>\n"))
          (insert (format "<compass>\n"))

          (funcall f-insert (car (alist-get ':ships ships-alist)))
           (mapc '(lambda (y)
                    (funcall f-insert y))
                 (cdr (alist-get ':ships ships-alist)))

           (insert (format "</compass>\n"))
           (buffer-string))))

#+END_SRC

**** Head
#+BEGIN_SRC emacs-lisp
  (defun mon-html-head (&optional local-css-list)
    "TODO: Provide both local theme and URI based (google-api, boosstrap etc.) css.
  Note: It is possible to override the global value by setting
  ,#+HTML_HEAD: attributes appropriately in individual .org files."

    (mon-html-head-impl (list
                         "orgstyle.css"
                         ;; "style1.css"
                         ;; "style2.css"
                         )))

#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-html-head-impl (&optional local-css-list)

    (let ((f-local-css-path (lambda (x) (mon-genpath (list (mon-theme-deploy-dir) "assets" "css" x)))))
      (with-temp-buffer
        (mapc '(lambda (y) (insert (format "<link rel=\"stylesheet\" type=\"text/css\" href=\"/%s\" />\n" (funcall f-local-css-path y))))
              local-css-list)
        (buffer-string))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-html-head-extra (&optional local-css-list)
    "Note: It is possible to override the global value by setting
  ,#+HTML_HEAD_EXTRA: attributes appropriately in individual .org files."

    (mon-html-head-extra-impl local-css-list))

#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-html-head-extra-impl (&optional local-css-list)
    (let ((f-local-css-path (lambda (x) (mon-genpath (list (mon-theme-deploy-dir) "assets" "css" x)))))
      (with-temp-buffer
        (mapc '(lambda (y) (insert (format "<link rel=\"stylesheet\" type=\"text/css\" href=\"/%s\" />\n" (funcall f-local-css-path y))))
              local-css-list)
        (buffer-string))))
#+END_SRC
*** Project-alist
**** Utilities
#+BEGIN_SRC emacs-lisp
  (defun mon-publish-alist-name (&optional theme suffix delimiter)
    (let ((sentinel
           (if suffix (concat (or delimiter "-") suffix))))

      (concat "mon" (or delimiter "-") (mon-theme-name theme)
              sentinel)))
#+END_SRC
**** Project alist and components (declarations only)
#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist ; (org-publish-project-alist)
        (list))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               (list (mon-publish-alist-name) ;; project name generated as mon-<theme>
                     :components (list
                                  (mon-publish-alist-name nil "chunk") ;; default
                                  (mon-publish-alist-name nil "-top") ;; default
                                  ;;-----
                                  (mon-publish-alist-name nil "articles")
                                  )))
#+END_SRC

**** CHUNK
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               ;; Move chunk files, maybe move into
               (list (mon-publish-alist-name nil "chunk") ;; default
                     :base-directory (mon-base-directory (mon-theme-name))
                     :exclued (regexp-opt (list (file-name-nondirectory (directory-file-name (mon-www-publish-directory)))))
                     :base-extension (mon-base-extension)

                     :publishing-directory (mon-publishing-directory (mon-theme-name))
                     :publishing-function 'org-publish-attachment
                     :recursive t
                     ))
#+END_SRC

**** TOP
#+BEGIN_SRC emacs-lisp
    (add-to-list 'org-publish-project-alist
                 ;; Various misc files in the root
                 (list (mon-publish-alist-name nil "-top") ;; default
                       :base-directory (mon-base-directory nil "about")
                       :base-extension "org"

                       :publishing-directory (mon-publishing-directory)
                       :publishing-function '(org-html-publish-to-html)
                       :recursive t

                       :auto-sitemap nil

                       :html-postamble (mon-html-postamble)
                       :html-preamble (mon-html-preamble
                                       "about"
                                       "proxy"
                                       "LowLand *Travellers*"   ;; mainsail/headline @ args: ship-structure
                                       "Never stop exploring!") ;; headsail/headline @ args: ship-structure

                       :html-head-include-default-style nil ;; Disable default css style
                       :html-head-include-scripts nil ;; Disable default javascript
                       :html-head (mon-html-head)
  ))
#+END_SRC

**** ARTICLES
#+BEGIN_SRC emacs-lisp
 (add-to-list 'org-publish-project-alist
               (list (mon-publish-alist-name nil "articles")
                     :base-directory (mon-base-directory nil "articles")

                     :publishing-directory (mon-publishing-directory nil "articles")
                     :publishing-function 'org-html-publish-to-html
                     :recursive t

                     :auto-sitemap nil

                     :html-postamble (mon-html-postamble)
                     :html-preamble (mon-html-preamble
                                     "articles"
                                     "proxy"
                                     "HighLand *Travellers*" ;; mainsail/headline @ args: ship-structure
                                     "Also keep exploring!") ;; headsail/headline @ args: ship-structure

                     :html-head-include-default-style nil ;; Disable default css style
                     :html-head-include-scripts nil ;; Disable default javascript
                     :html-head (mon-html-head)
                     ))
#+END_SRC

* STOCK
** GRAINS
*** ARTICLES
**** TODO Cicero
# NOTE: Licensing restrictions may not apply with the dummy texts illustrated for testing purpose in this section;
#       they are all well known and publicly available.

#+OPTIONS: toc:nil
#+begin_abstract
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.
Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,
sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.

Keywords: Cicero
#+end_abstract

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.
Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,
sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.

Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit,
sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.
Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam,
nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate
velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum
deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident,
similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga.
similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga.
Et harum quidem rerum facilis est et expedita distinctio.

Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus
id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.
Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates
repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus,
ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.



Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.
Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,
sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.

Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit,
sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.
Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam,
nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate
velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum
deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident,
similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga.
Et harum quidem rerum facilis est et expedita distinctio.

Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus
id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.
Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates
repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus,
ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.

**** TODO Lorem Ipsum
:PROPERTIES:
:TITLE:    Lorem Ipsum
:EXPORT_FILE_NAME: STOCK/GRAINS/ARTICLES/Lorem Ipsum.org
:END:

# NOTE: Licensing restrictions may not apply with the dummy texts illustrated for testing purpose in this section;
#       they are all well known and publicly available.

#+OPTIONS: toc:nil
#+begin_abstract
Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit..."
"There is no one who loves pain itself, who seeks after it and wants to have it, simply because it is pain..."

Keywords: Lorem, Ipsum
#+end_abstract

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam suscipit mattis nibh nec maximus.
Quisque ac fringilla orci. Vivamus id nulla id leo rutrum consequat. Mauris a orci eros.
Nulla interdum, tortor quis feugiat commodo, turpis sem consectetur ligula, sit amet placerat nunc metus nec leo.
Quisque nulla nisl, pharetra eget imperdiet id, mollis at nunc. Curabitur scelerisque porta felis, vitae placerat risus.
Donec justo augue, pretium ut tincidunt eu, egestas vel leo. Fusce non scelerisque magna.
Vestibulum ultricies id erat vel lacinia. Sed at pretium quam. Cras eu lectus hendrerit, consequat mauris in, lobortis turpis.
Morbi non massa a mauris elementum accumsan. Sed tempus id lectus ac auctor.

Integer volutpat cursus augue venenatis iaculis. Donec blandit velit quis tristique pharetra.
Suspendisse potenti. Praesent porttitor efficitur felis, non porttitor tortor efficitur ac.
Nam vestibulum libero et mollis pulvinar. Nunc tempor ligula a fermentum blandit. Nam quis dolor purus.

Donec facilisis, enim non auctor tempor, ligula erat aliquet arcu, bibendum molestie nulla odio sodales quam.
Donec eget faucibus metus. Sed eget velit at quam convallis porttitor nec non purus.
Interdum et malesuada fames ac ante ipsum primis in faucibus. Vivamus pellentesque porttitor ligula eu sollicitudin.
Duis lacus elit, placerat quis est sit amet, semper condimentum metus.
Donec mattis, nibh in congue ultrices, est quam euismod lacus, vitae ullamcorper ante risus in lorem.
Cras tincidunt sem id imperdiet posuere. Pellentesque sit amet eros sem.
Aliquam erat volutpat. Nulla non eros euismod, vulputate metus in, pretium tellus.
Integer vulputate maximus libero sit amet hendrerit.

Aliquam eleifend lacus felis, eget tristique purus finibus sed.
Pellentesque eget turpis quis tortor cursus consectetur sed vel turpis. Maecenas egestas laoreet finibus.
Vestibulum odio ipsum, mollis et rhoncus scelerisque, mattis vel ante.
Aliquam ut pellentesque enim. Sed bibendum luctus eros vel vehicula. Ut tempor tincidunt lectus a gravida.
Vivamus auctor, urna sed consectetur vehicula, mi velit mollis ligula, ac volutpat enim est quis orci.
Phasellus eget auctor libero, elementum lobortis magna. Nulla quis quam vel eros interdum efficitur non in nisl.
Proin varius, mauris ac eleifend consequat, justo nibh molestie lacus, at pulvinar tortor nisi non purus.
Curabitur mollis vel lorem ac vehicula. Maecenas sagittis lacinia risus, nec sollicitudin magna scelerisque vel.
Donec a tristique nibh.

Integer nunc sem, suscipit id dolor vitae, lobortis pellentesque diam. Pellentesque egestas nisi et diam dapibus lobortis.
Donec vel dolor at nulla facilisis molestie. Morbi id erat in mauris molestie hendrerit.
Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec lacinia dolor.
Etiam finibus metus sit amet magna tristique, sit amet aliquet nibh interdum.
Morbi euismod euismod urna, sed vestibulum metus malesuada vel. Nam mollis varius accumsan.
Aliquam eu molestie libero. Suspendisse potenti. Aliquam pellentesque convallis erat ornare luctus.
Duis a enim hendrerit eros ornare aliquet eu vel lectus. Aliquam erat volutpat.
Curabitur efficitur accumsan dolor, sit amet sodales nisl molestie quis. Nam ut dolor vitae lectus tempus cursus.
** CHUNK
*** THEMES
**** PROXY
***** ASSETS
****** CSS
******* test1.css
/* an example for (org-refile) testing... */
h1 {
    color: red;
    font-size: 25px;
}
******* test2.css
:PROPERTIES:
:header-args: :tangle STOCK/CHUNK/THEMES/PROXY/ASSETS/CSS/test2.css
:END:
#+BEGIN_SRC css
  /* an example for (org-refile) testing... */
  h1 {
      color: red;
      font-size: 25px;
  }
#+END_SRC

#+BEGIN_SRC css
  /* an example for (org-refile) testing... */
  h2 {
      color: yellow;
      font-size: 15px;
  }
#+END_SRC
******* test3
:PROPERTIES:
:header-args: :tangle STOCK/CHUNK/THEMES/PROXY/ASSETS/CSS/test3
:END:
#+BEGIN_SRC css
  /* an example for (org-refile) testing... */
  h1 {
      color: red;
      font-size: 25px;
  }
#+END_SRC

#+BEGIN_SRC css
  /* an example for (org-refile) testing... */
  h2 {
      color: yellow;
      font-size: 15px;
  }
#+END_SRC
