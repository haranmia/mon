* COMMENT File-local variables
# -*- coding:utf-8 -*-
#+TITLE: Settings for Maximizing Org-mode Note taking and publishing experience.
#+AUTHOR: Haran Mia
#+EMAIL: 37643674+haranmia@users.noreply.github.com
#+DATE: %T
#+STARTUP:indent
#+STARTUP: inlineimages


* LICENSE
MIT License

Copyright (c) 2018 Haran Mia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

* README
  The idea is to keep everything in a single .org file,
  including both configurations and contents.
  This .org file can also be used for publishing pdf articles,
  web pages, etc. using org-modes export functionalities.

  For availabe features, please refer to the function source-code.


* SRC
** ISSUES
** WISH-lIST
   - [ ] CAPTURE and refile as a subtree in this note
     - [ ] Deal with duplicate outline-headline in different captures.
     - [ ] Sanitizers for title and export-file-name.
     - [ ] Consider a more generic syntax for function-finding-location.

** Generic elisp utilities
*** Genpath
#+BEGIN_SRC emacs-lisp
  (defun mon-genpath (path-elem &optional absolute)
    (let ((relative-path (mapconcat 'directory-file-name path-elem "/")))
      (if absolute
          (expand-file-name relative-path)
        relative-path)))
  ;; Example:
  ;; (message (mon-genpath (list "a" "b" "c.txt")))
#+END_SRC

** Generic org-mode utilities
*** Org-outline to filename
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-to-org-filename (&optional base-directory)
    (mon-org-outline-to-filename ".org" base-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-to-filename (&optional extension base-directory)
    "Note: non-nil (file) extension contains the leading dot.
  "
    (let ((filename
           (concat (org-display-outline-path nil t "/" t) extension)))

      (if base-directory
          (expand-file-name
           filename (file-name-as-directory base-directory))
        filename)))
#+END_SRC
*** Org-outline heading (get-function)
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-get-heading ()
    (nth 4 (org-heading-components)))
#+END_SRC
** CAPTURE and refile as a subtree in this note
*** Capture Templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
          ("a" "Articles" entry
           (file+olp buffer-file-name
                     "STOCK" "GRAINS" "ARTICLES") ;; Outline "STOCK/GRAINS/ARTICLES" must exist
           "* TODO %^{Title}
        ,#+OPTIONS: toc:nil
        ,#+begin_abstract
        %^{Abstract}
        Keywords: %^{Tags (comma separated)}
        ,#+end_abstract
        %\\2\n%?\n"
           :prepend t :kill-buffer t)
          ))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-capture-after-finalize-hook ()
    (org-capture-goto-last-stored))

  (add-hook 'org-capture-after-finalize-hook
            'mon-org-capture-after-finalize-hook)
#+END_SRC
*** Custom properties (export-file-name, titles, etc.)
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-property-get (&optional property-str)
    "Properties such as EXPORT_FILE_NAME etc. to be passed
  enclosed within double quotation."

    (org-entry-get (point) property-str))
#+END_SRC

**** EXPORT_FILE_NAME
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-export-file-name-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((export-file (mon-org-custom-property-get "EXPORT_FILE_NAME")))
        (unless export-file
          (org-set-property "EXPORT_FILE_NAME"
                            (mon-org-outline-to-org-filename))))
      (widen)))
#+END_SRC

**** TTILE
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-title-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "TITLE")))
        (unless title
          (org-set-property "TITLE"
                            (mon-org-outline-get-heading))))
      (widen)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
#+END_SRC
#+BEGIN_SRC emacs-lisp
#+END_SRC
* STOCK
** GRAINS
*** ARTICLES


