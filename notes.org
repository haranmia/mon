* COMMENT File-local variables
# -*- coding:utf-8 -*-
#+TITLE: Maximize Note taking/publishing experience with Org-Mode.
#+AUTHOR: Haran Mia
#+EMAIL: 37643674+haranmia@users.noreply.github.com
#+DATE: %T
#+STARTUP:indent
#+STARTUP: inlineimages


* LICENSE
MIT License

Copyright (c) 2018 Haran Mia

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

* README
  The idea is to keep everything in a single .org file,
  including both contents and configurations.
  This .org file can also be used for publishing pdf articles,
  web pages, etc. using org-modes export functionalities.

  For availabe features, please refer to the comments/source-codes below.

** TODO Prologue

* Wish-list (features/issues)
:PROPERTIES:
:VISIBILITY: all
:END:
** ISSUES

** WISH-LIST
   - [ ] CAPTURE and refile as a subtree in this note
     - [ ] Deal with duplicate outline-headline in different captures.
     - [ ] Sanitizers for title and export-file-name.
     - [ ] Consider a more generic syntax for function-finding-location.

** Resolutions and/or Design considerations
:PROPERTIES:
:VISIBILITY: folded
:END:
- [X] Resolve conflicts with terminologies used for structuring/styles
      such as title, subtite, or page etc.

  Considerations: Using title/subtitle to refer to headings in a single article is rather trivial.
  Therefore group-wise/site-wise title/subtitle should be modified.
  For now using a simple analogy from sailboat racing:

  + a-ship (previously, pagestruct)
    + name
    + anchor (previously, link)
    + mainsail (previously, title)
    + headsail (previously, subtitle)
    + pages/articles x N ( each page will have their individual title/subtitle)

* SRC
** Generic elisp utilities
*** Genpath
#+BEGIN_SRC emacs-lisp
  (defun mon-genpath (path-elem &optional absolute)
    (let ((relative-path (mapconcat 'directory-file-name path-elem "/")))
      (if absolute
          (expand-file-name relative-path)
        relative-path)))
  ;; Example:
  ;; (message (mon-genpath (list "a" "b" "c.txt")))
#+END_SRC

** Generic org-mode utilities
*** Org-outline to filename
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-to-org-filename (&optional base-directory)
    (mon-org-outline-to-filename ".org" base-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-to-filename (&optional extension base-directory)
    "Note: non-nil (file) extension contains the leading dot.
  "
    (let ((filename
           (concat (org-display-outline-path nil t "/" t) extension)))

      (if base-directory
          (expand-file-name
           filename (file-name-as-directory base-directory))
        filename)))
#+END_SRC
*** Org-outline heading (get-function)
#+BEGIN_SRC emacs-lisp
  (defun mon-org-outline-get-heading ()
    (org-get-heading "no-tags" "no-todo" "no-priority" "no-comment"))
  ;; Although calling (org-heading-components) and then retrieving
  ;; the 4th-element necessarily does the same thing,
  ;; org-get-heading is more intuitive, provides better abstraction.
#+END_SRC
** CAPTURE and refile as a subtree in this note
*** Capture Templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
          ("a" "Articles" entry
           (file+olp buffer-file-name
                     "STOCK" "GRAINS" "ARTICLES") ;; Outline "STOCK/GRAINS/ARTICLES" must exist
           "* TODO %^{Title}
  ,#+OPTIONS: toc:nil
  ,#+begin_abstract
  %^{Abstract}
  Keywords: %^{Keywords (comma separated)}
  ,#+end_abstract
  %\\2\n%?\n"
           :prepend t :kill-buffer t)
          ))
  ;; To capture using the above template, use C-c c a
  ;; then interactively input Title and other entries
  ;; finally C-c C-c to finish.
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-capture-after-finalize-hook ()
    (org-capture-goto-last-stored))

  (add-hook 'org-capture-after-finalize-hook
            'mon-org-capture-after-finalize-hook)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-capture-prepare-finalize-hook ()
      (progn
        (mon-org-custom-title-create)
        (mon-org-custom-export-file-name-create)))

  (add-hook 'org-capture-prepare-finalize-hook
            'mon-org-capture-prepare-finalize-hook)

#+END_SRC

*** Custom properties (export-file-name, titles, etc.)
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-property-get (&optional property-str)
    "Properties such as EXPORT_FILE_NAME etc. to be passed
  enclosed within double quotation."

    (org-entry-get (point) property-str))
#+END_SRC
**** EXPORT_FILE_NAME
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-export-file-name-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((export-file-name (mon-org-custom-property-get "EXPORT_FILE_NAME")))
        (unless export-file-name
          (org-set-property "EXPORT_FILE_NAME"
                            (mon-org-outline-to-org-filename))))
      (widen)))
#+END_SRC

**** TANGLE HEADER-ARGS (Cf. EXPORT_FILE_NAME)
#+BEGIN_SRC emacs-lisp
  (defun mon-org-bable-tangle-header-args-create (&optional extension)
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((export-file (mon-org-custom-property-get "header-args")))
        (unless export-file
          (org-set-property "header-args"
                            (concat ":tangle "
                                    (mon-org-outline-to-filename)
                                    (or extension "")))))
      (widen)))
#+END_SRC
**** TTILE
#+BEGIN_SRC emacs-lisp
  (defun mon-org-custom-title-create ()
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)

      (let ((title (mon-org-custom-property-get "TITLE")))
        (unless title
          (org-set-property "TITLE"
                            (mon-org-outline-get-heading))))
      (widen)))
 #+END_SRC
** Refile a subtree from this note
*** File-local variables
#+BEGIN_SRC emacs-lisp
  (defun mon-org-insert-file-headers
      (&optional
       title
       subtitle
       author
       email
       fixed-date-time
       keyword-tags
       startup-option)

    (interactive)

    (format "* COMMENT File-local variables
  # -*- coding:utf-8 -*-
  ,#+TITLE: %s
  ,#+SUBTITLE: %s
  ,#+AUTHOR: %s
  ,#+EMAIL: %s
  ,#+DATE: %s
  ,#+KEYWORDS: %s
  ,#+STARTUP: %s\n\n\n"
            (or title "Untitled")
            (or subtitle "")
            (or author "Anonymous")
            email
            (or fixed-date-time (format-time-string "%c" (current-time))) ;; if not previously created, current-time should be good
            keyword-tags
            (or startup-option "indent")))
#+END_SRC
*** Subtree contents for org-export
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile-to-org (&optional base-directory)
    (interactive)
    (mon-org-subtree-contents-refile ".org" base-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile-bare (&optional base-directory)
    (interactive)
    (mon-org-subtree-contents-refile nil base-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile (&optional extension base-directory)
    (interactive)

    (save-excursion
      (org-narrow-to-subtree)
      (org-back-to-heading)
      (let ((target-filename
             (or (mon-org-custom-property-get "EXPORT_FILE_NAME")
                 (mon-org-outline-to-filename extension base-directory))))

        (write-region (org-get-entry) nil target-filename))
      (widen)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile-to-org-no-props (&optional base-directory)
    (interactive)
    (mon-org-subtree-contents-refile-no-props ".org" base-directory))

  (defun mon-org-subtree-contents-refile-bare-no-props (&optional base-directory)
    (interactive)
    (mon-org-subtree-contents-refile-no-props nil base-directory))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-contents-refile-no-props (&optional extension base-directory)

    (save-excursion
      (org-narrow-to-subtree)
      (org-back-to-heading)

      (let ((org-yank-adjusted-subtrees t)
            (target-filename
             (or (mon-org-custom-property-get "EXPORT_FILE_NAME")
                 (mon-org-outline-to-filename extension base-directory)))
            (this-title (mon-org-custom-property-get "TITLE"))
            (this-subtitle (mon-org-custom-property-get "SUBTITLE"))
            (this-author (mon-org-custom-property-get "AUTHOR"))
            (this-email (mon-org-custom-property-get "EMAIL"))
            (this-create-timestamp (mon-org-custom-property-get "CREATE_TIMESTAMP"))
            (this-update-timestamp (mon-org-custom-property-get "UPDATE_TIMESTAMP")) ;; (last update provided via postamble) ponder if keeping that information in property drawer will be of use
            (this-keywords (mon-org-custom-property-get "KEYWORDS")) ;; need to take-out from buffer
            (this-indent (mon-org-custom-property-get "INDENT"))
            )

        ;;(write-region (org-get-entry) nil target-filename)
        (org-copy-subtree)
        (with-current-buffer (get-buffer-create (concat "*-temp-buffer-SOME-RANDOM-ID-HERE-*"))
          (org-mode)


          (insert (mon-org-insert-file-headers
                   this-title ;; title
                   this-subtitle ;; subtitle
                   this-author ;; author
                   this-email ;; email
                   this-create-timestamp ;; fixed-date-time
                   this-keywords ;; keyword-tags
                   this-indent ;;startup-option
                   ))
          (save-excursion
            (goto-char (point-min))
            (write-region (point-at-bol 2) (point-max) target-filename)) ;; removes the "* COMMENT File-local variables" outline

          (org-yank)
          (org-back-to-heading)

          (if (re-search-forward ":PROPERTIES:" (point-max) t)
              (let ((beg (match-beginning 0))
                    (end (re-search-forward ":END:")))
                (write-region (+ end 1) (point-max) target-filename t)) ;; write-region with append=t

            (write-region (point-at-bol 2) (point-max) target-filename t))


          (kill-buffer)))
      (widen)))
#+END_SRC

*** Tangle babel source blocks
#+BEGIN_SRC emacs-lisp
  (defun mon-org-subtree-tangle-all-babel-blocks ()
    "header-args :tangle <filename.extension>
  is assumed to be present in subtree properties."
    (interactive)

    (save-excursion
      (org-back-to-heading)
      (org-narrow-to-subtree)
      (org-babel-tangle)
      (widen)))
#+END_SRC
** HTML Publishing
*** Congfiguration database
Put all configurations in the hash-table 'mon-configdb'
#+BEGIN_SRC emacs-lisp
  (setq mon-configdb (make-hash-table))
#+END_SRC

*** Core directory and path utilities
**** File-dir and root-dir
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-file-dir mon-configdb)
        (file-name-directory (or load-file-name buffer-file-name)))

  (defun mon-file-dir ()
    (gethash 'mon-file-dir mon-configdb))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-root-dir mon-configdb) "stock")

  (defun mon-root-dir (&optional init-root-dir)
    (or init-root-dir
        (gethash 'mon-root-dir mon-configdb)))
#+END_SRC
**** Base directory
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-contents-dir mon-configdb)
        (concat (file-name-as-directory (mon-root-dir))
                (file-name-as-directory "grains"))) ;; default

  (defun mon-contents-dir (&optional init-contents-dir use-as-origin)
    ;; set
    (and init-contents-dir
         (if use-as-origin
             ;; if
             (setf (gethash 'mon-contents-dir mon-configdb)
                   (file-name-as-directory init-contents-dir))
           ;; else
           (setf (gethash 'mon-contents-dir mon-configdb)
                 (concat (file-name-as-directory (mon-root-dir))
                         (file-name-as-directory init-contents-dir)))))
    ;; get
    (gethash 'mon-contents-dir mon-configdb))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-www-contents-directory (&optional dir prefix-path suffix-path absolute)
    (let* ((this-dir
            (file-name-as-directory
             (concat (or (and prefix-path (file-name-as-directory prefix-path))
                         (mon-contents-dir))
                     dir)))

           (suffix-to-this
            (and suffix-path
                 (if (file-name-extension suffix-path) suffix-path
                   (file-name-as-directory suffix-path))))
           ;;
           (contents-relative-path (concat this-dir suffix-to-this)))


        ;; Use concat to force relative path by default.
        ;; For absolute==NON-NIL, use absolute path.
        (if absolute
            (expand-file-name contents-relative-path)
          contents-relative-path)))
#+END_SRC
**** Publishing-dir
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-www-dir mon-configdb)
        (file-name-as-directory "w3")) ;; default
  (defun mon-www-dir (&optional init-www-dir use-as-origin)
      ;; set
      (and init-www-dir
           (if use-as-origin
               (setf (gethash 'mon-www-dir mon-configdb)
                     (file-name-as-directory init-www-dir))))

      ;; get
      (gethash 'mon-www-dir mon-configdb))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-www-publish-directory (&optional dir prefix-path suffix-path absolute)
    (let* ((this-dir
            (file-name-as-directory
             (concat (or (and prefix-path (file-name-as-directory prefix-path))
                         (mon-www-dir))
                     dir)))

           (suffix-to-this
            (and suffix-path
                 (if (file-name-extension suffix-path) suffix-path
                   (file-name-as-directory suffix-path))))
           ;;
           (contents-relative-path (concat this-dir suffix-to-this)))

      ;; Use concat to force relative path by default.
      ;; For absolute==NON-NIL, use absolute path.
      (if absolute
          (expand-file-name contents-relative-path)
        contents-relative-path)))

#+END_SRC

*** Theme
**** Name and deploy directory
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'theme-name mon-configdb) '"proxy")

  (defun mon-theme-name (&optional init-theme-name)
    (or init-theme-name
        (gethash 'theme-name mon-configdb)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-theme-deploy-dir (&optional init-theme-name)
    (format "chunk/themes/%s" (mon-theme-name init-theme-name)))
#+END_SRC
**** Base extension
#+BEGIN_SRC emacs-lisp
  (setf (gethash 'mon-attachments mon-configdb)
        (regexp-opt '("css" "woff" "js" "html" "pdf"
                      "gif" "ico" "jpg" "jpeg" "png" "svg")))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-base-extension (&optional init-theme)
    (gethash 'mon-attachments mon-configdb))
#+END_SRC
**** Base directory
#+BEGIN_SRC emacs-lisp
  (defun mon-base-directory (&optional theme page prefix-dir suffix-dir absolute)
    (let ((dir
           (if theme
               (mon-www-contents-directory (mon-theme-deploy-dir theme) (mon-root-dir)) ;; if
             ;; else == mon-base-direcotry-no-theme
             (mon-www-contents-directory page prefix-dir suffix-dir absolute))))

    (downcase dir)))
#+END_SRC
**** Publishing directory
#+BEGIN_SRC emacs-lisp
  (defun mon-publishing-directory (&optional theme page prefix-dir suffix-dir absolute)
    (let ((dir
           (if theme
               (mon-www-publish-directory (mon-theme-deploy-dir theme)) ;; if
             ;; else == mon-www-publish-dir-no-theme
             (mon-www-publish-directory page prefix-dir suffix-dir absolute))))

    (downcase dir)))
#+END_SRC
**** Postamble
#+BEGIN_SRC emacs-lisp
  (defun mon-html-postamble (&optional init-theme)
    "<p>Last update: <span class=\"date\">%C</span></p>")
#+END_SRC
**** Preamble
#+BEGIN_SRC emacs-lisp
  (defun mon-html-preamble (&optional init-page init-theme mainsail headsail)
    "TBD: Constructor for ships /w theme-inheritance someday."
    (mon-html-preamble-impl-proxy '((:ships . (((:name . "About")
                                                (:anchor . "/"))
                                               ((:name . "Articles")
                                                (:anchor . "articles")))))
                                  mainsail ;; main-headline
                                  headsail) ;; sub-headline
    )
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-html-preamble-impl-proxy (&optional ships-alist mainsail headsail)
    "Note: mainsail/headsail are placeholders for main/sub-headline."

      (let* ((f-name (lambda (x) (alist-get ':name  x)))
             (f-link (lambda (x) (alist-get ':anchor  x)))
             (f-insert
              (lambda (x)
                (progn
                  (insert (format "  <a href=\"%s\">%s</a>\n"
                                  (expand-file-name (file-name-as-directory
                                                     (funcall f-link x))
                                                    "/")
                                  (funcall f-name x)
                                  ))))))


        (with-temp-buffer
          (insert (format "<h1 class=\"mainsail\">%s\n" (or mainsail "%%MAIN-HEADLINE")))
          (insert (format "  <p class=\"headsail\"> %s </p>\n" (or headsail "%%SUB-HEADLINE")))

          (insert (format "</h1>\n"))
          (insert (format "<compass>\n"))

          (funcall f-insert (car (alist-get ':ships ships-alist)))
           (mapc '(lambda (y)
                    (funcall f-insert y))
                 (cdr (alist-get ':ships ships-alist)))

           (insert (format "</compass>\n"))
           (buffer-string))))
#+END_SRC

**** Head
#+BEGIN_SRC emacs-lisp
  (defun mon-html-head (&optional local-css-list)
    "TODO: Provide both local theme and URI based (google-api, boosstrap etc.) css.
  Note: It is possible to override the global value by setting
  ,#+HTML_HEAD: attributes appropriately in individual .org files."

    (mon-html-head-impl (list "style1.css"
                              "style2.css")))

#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-html-head-impl (&optional local-css-list)

    (let ((f-local-css-path (lambda (x) (mon-genpath (list (mon-theme-deploy-dir) "assets" "css" x)))))
      (with-temp-buffer

        (mapc '(lambda (y) (insert (format "<link rel=\"stylesheet\" type=\"text/css\" href=\"/%s\" />\n" (funcall f-local-css-path y))))
              local-css-list)
        (buffer-string))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-html-head-extra (&optional local-css-list)
    "Note: It is possible to override the global value by setting
  ,#+HTML_HEAD_EXTRA: attributes appropriately in individual .org files."

    (mon-html-head-extra-impl local-css-list))

#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun mon-html-head-extra-impl (&optional local-css-list)
    (let ((f-local-css-path (lambda (x) (mon-genpath (list (mon-theme-deploy-dir) "assets" "css" x)))))
      (with-temp-buffer
        (mapc '(lambda (y) (insert (format "<link rel=\"stylesheet\" type=\"text/css\" href=\"/%s\" />\n" (funcall f-local-css-path y))))
              local-css-list)
        (buffer-string))))
#+END_SRC
*** Project-alist
**** Utilities
#+BEGIN_SRC emacs-lisp
  (defun mon-publish-alist-name (&optional theme suffix delimiter)
    (let ((sentinel
           (if suffix (concat (or delimiter "-") suffix))))

      (concat "mon" (or delimiter "-") (mon-theme-name theme)
              sentinel)))
#+END_SRC
**** Project alist and components (declarations only)
#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist ; (org-publish-project-alist)
        (list))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               (list (mon-publish-alist-name) ;; project name generated as mon-<theme>
                     :components (list
                                  (mon-publish-alist-name nil "chunk") ;; default
                                  (mon-publish-alist-name nil "-top") ;; default
                                  ;;-----
                                  (mon-publish-alist-name nil "articles")
                                  )))
#+END_SRC

**** CHUNK
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               ;; Move chunk files, maybe move into
               (list (mon-publish-alist-name nil "chunk") ;; default
                     :base-directory (mon-base-directory (mon-theme-name))
                     :exclued (regexp-opt (list (file-name-nondirectory (directory-file-name (mon-www-publish-directory)))))
                     :base-extension (mon-base-extension)

                     :publishing-directory (mon-publishing-directory (mon-theme-name))
                     :publishing-function 'org-publish-attachment
                     :recursive t
                     ))
#+END_SRC

**** TOP
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               ;; Various misc files in the root
               (list (mon-publish-alist-name nil "-top") ;; default
                     :base-directory (mon-base-directory nil "about")
                     :base-extension "org"

                     :publishing-directory (mon-publishing-directory)
                     :publishing-function '(org-html-publish-to-html)
                     :recursive t

                     :auto-sitemap nil

                     :html-postamble (mon-html-postamble)
                     :html-preamble (mon-html-preamble
                                     "about"
                                     "proxy"
                                     "LowLand *Travellers*"   ;; mainsail/headline @ args: ship-structure
                                     "Never stop exploring!") ;; headsail/headline @ args: ship-structure

                     :html-head-include-default-style nil ;; Disable default css style
                     :html-head-include-scripts nil ;; Disable default javascript
                     :html-head (mon-html-head)
                     ))
#+END_SRC
**** ARTICLES
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-publish-project-alist
               (list (mon-publish-alist-name nil "articles")
                     :base-directory (mon-base-directory nil "articles")

                     :publishing-directory (mon-publishing-directory nil "articles")
                     :publishing-function 'org-html-publish-to-html
                     :recursive t

                     :auto-sitemap nil

                     :html-postamble (mon-html-postamble)
                     :html-preamble (mon-html-preamble
                                     "about"
                                     "proxy"
                                     "HighLand *Travellers*" ;; mainsail/headline @ args: ship-structure
                                     "Also keep exploring!") ;; headsail/headline @ args: ship-structure

                     :html-head-include-default-style nil ;; Disable default css style
                     :html-head-include-scripts nil ;; Disable default javascript
                     :html-head (mon-html-head)
                     ))
#+END_SRC
* STOCK
** GRAINS
*** ARTICLES
